{"version":3,"sources":["Components/errorboundary.js","Components/map.js","Components/venuelist.js","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","react_default","a","createElement","children","error","Component","window","gm_authFailure","alert","fbAppID","process","fbAppSecret","MapContainer","mapReady","map","setTimeout","addMarkers","getVenueInfo","searchResults","placeSearchUrl","concat","headers","Headers","request","Request","method","fetch","then","res","ok","json","Error","status","data","forEach","result","index","venue","name","lat","location","latitude","lng","longitude","id","overall_star_rating","rating","price_range","checkins","website","link","push","catch","err","getFbResults","onMapClicked","infoWindow","close","allMarkers","marker","setAnimation","onInfoWindowClose","updateQuery","query","_this2","markers","google","maps","InfoWindow","fbResults","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","value","Marker","position","title","animation","infoContent","e","addListener","getAnimation","setContent","open","onMarkerClick","_iterator","Symbol","iterator","next","done","return","getMap","errorboundary","dist","aria-label","className","role","initialCenter","onClick","onReady","zoom","GoogleApiWrapper","apiKey","VenueList","venues","htmlFor","type","placeholder","onChange","event","target","onKeyUp","key","onListClick","App","input","setState","menuOpen","filterList","clickedPlace","setMarkerVisibility","queryUpperCase","toUpperCase","items","document","querySelectorAll","visiblePlaces","item","innerHTML","indexOf","style","display","changeAmp","replace","trim","placesOnList","find","includes","setVisible","activeMarker","triggerMarkerClick","trigger","mkr","showingInfoWindow","showAllMarkers","tabIndex","BurgerMenu","noOverlay","isOpen","width","venuelist","bind","ref","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App","getElementById","URL","origin","addEventListener","response","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9ebfa674.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong with Google Maps API.</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\nimport ErrorBoundary from './errorboundary';\r\n\r\nwindow.gm_authFailure = ()=>{\r\n  alert(\"Invalid Google API key. Please check your Google API key\");\r\n};\r\n\r\nconst fbAppID = process.env.REACT_APP_fbAppID;\r\nconst fbAppSecret = process.env.REACT_APP_fbAppSecret;\r\nconst googleMapsAPI = process.env.REACT_APP_googleMapsAPI;\r\n\r\nclass MapContainer extends Component {\r\n  componentDidMount() {\r\n    this.getVenueInfo();\r\n  }\r\n\r\n  mapReady = (props,map) => {\r\n    //setTimeout is added to ensure that data from API is available in order to create the markers.\r\n    setTimeout(() => {\r\n      this.addMarkers(map);\r\n    }, 1300);\r\n  }\r\n  //fetch nearby restaurant information from Facebook Graph API\r\n  getVenueInfo = () => {\r\n    let searchResults = [];\r\n    const placeSearchUrl = `https://graph.facebook.com/v3.2/search?type=place&center=1.290604,103.846473&categories=[\"FOOD_BEVERAGE\"]&distance=1000&fields=name, location, overall_star_rating, phone, website, picture, link, checkins, price_range&access_token=${fbAppID}|${fbAppSecret}`\r\n    let headers = new Headers();\r\n    let request = new Request(placeSearchUrl, {\r\n      method: 'GET',\r\n      headers\r\n    });\r\n\r\n    fetch(request).then(res => {\r\n      if (!res.ok) {\r\n        throw Error (`Request rejected with status code ${res.status}`);\r\n      } else {\r\n        return res.json()\r\n      }}).then(res => {\r\n      res.data.forEach((result, index)=> {\r\n        let venue = {};\r\n        venue.name = result.name;\r\n        venue.lat = result.location.latitude;\r\n        venue.lng = result.location.longitude;\r\n        venue.id = result.id;\r\n        if(result.overall_star_rating) {\r\n          venue.rating = result.overall_star_rating;\r\n        } else {\r\n          venue.rating = \"No rating provided\";\r\n        }\r\n        if(result.price_range) {\r\n          venue.price_range = result.price_range;\r\n        } else {\r\n          venue.price_range = \"No price range provided\";\r\n        }\r\n        if(result.checkins) {\r\n          venue.checkins = result.checkins;\r\n        } else {\r\n          venue.checkins = \"None\";\r\n        }\r\n        if(result.website) {\r\n          venue.website = result.website;\r\n        } else {\r\n          venue.website = result.link;\r\n        }\r\n        venue.index = index;\r\n        searchResults.push(venue);\r\n      });\r\n    }).catch(err=> {\r\n      alert(\"Something went wrong with Facebook Places API.\"+ err);\r\n    })\r\n    this.props.getFbResults(searchResults);\r\n  }\r\n\r\n  addMarkers(map) {\r\n    let markers = [];\r\n    const infoWindow = new this.props.google.maps.InfoWindow();\r\n\r\n    if(this.props.fbResults){\r\n      for (let venue of this.props.fbResults){\r\n        const marker = new this.props.google.maps.Marker({\r\n          position: {lat: venue.lat, lng: venue.lng},\r\n          map: map,\r\n          title: venue.name,\r\n          id: venue.index,\r\n          animation: 2  //Drop\r\n        });\r\n        markers.push(marker);\r\n        const infoContent = `<h4>${venue.name}</h4><p>Rating: ${venue.rating}</p><p>Price Range: ${venue.price_range}</p><p>Facebook Check-ins: ${venue.checkins}</p><a href=${venue.website}>Website</a>`;\r\n        ['click', 'mouseover'].forEach(e => {\r\n          marker.addListener(e, ()=> {\r\n          if (marker.getAnimation() !== null) {\r\n            marker.setAnimation(null);\r\n          } else {\r\n            marker.setAnimation(1); //Bounce\r\n          }\r\n            infoWindow.setContent(infoContent);\r\n            infoWindow.open(map, marker);\r\n            this.props.onMarkerClick(venue, marker, infoWindow);\r\n          }, false);\r\n        });\r\n        marker.addListener('mouseout', ()=>{\r\n          marker.setAnimation(null);\r\n          this.props.onInfoWindowClose();\r\n        })\r\n        infoWindow.addListener('closeclick', ()=>{\r\n          marker.setAnimation(null);\r\n          this.props.onInfoWindowClose();\r\n        })\r\n      }\r\n    }\r\n    this.props.getMap(markers, infoWindow, map, this.props.google);\r\n  }\r\n\r\n  onMapClicked = ()=>{\r\n    if(this.props.infoWindow){\r\n      this.props.infoWindow.close();\r\n    }\r\n    this.props.allMarkers.forEach(marker=>{\r\n      marker.setAnimation(null);\r\n    }, this.props.onInfoWindowClose)\r\n    this.props.updateQuery(this.props.query);\r\n  }\r\n\r\n  render() {\r\n    if(window.google){\r\n      return (\r\n        <ErrorBoundary>\r\n          <Map\r\n            aria-label=\"map\"\r\n            className=\"map\"\r\n            role=\"application\"\r\n            google={this.props.google}\r\n            initialCenter={{lat:1.290604, lng:103.846473}}\r\n            onClick={this.onMapClicked}\r\n            onReady={this.mapReady}\r\n            zoom={15}>\r\n          </Map>\r\n        </ErrorBoundary>\r\n      )\r\n    } else {\r\n      return(\r\n        <div>Error loading Google Maps</div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (`${googleMapsAPI}`)\r\n})(MapContainer)\r\n","import React from 'react';\r\n\r\nconst VenueList = (props) => {\r\n  const venues = props.venues;\r\n  return (\r\n    <div>\r\n    <label className=\"label\" htmlFor=\"searchBox\">Search Box</label>\r\n      <input\r\n        id=\"searchBox\"\r\n        type=\"text\"\r\n        placeholder=\"Type here to filter locations\"\r\n        value={props.query}\r\n        onChange={event => props.updateQuery(event.target.value)}\r\n        onKeyUp={event => props.updateQuery(event.target.value)}/>\r\n      <ul className=\"venue-list\">\r\n      { venues && (venues.map((venue, index) =>\r\n        <li className=\"list-item\" key={index}>\r\n          <button\r\n            className=\"item\"\r\n            name={venue.name}\r\n            key={index}\r\n            onClick={event => props.onListClick(venue, index)}>{venue.name}\r\n          </button>\r\n        </li>\r\n      ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VenueList;\r\n","import React, { Component } from 'react';\r\nimport './Styles/App.css';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport MapContainer from './Components/map'\r\nimport VenueList from './Components/venuelist'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeMarker: {},\r\n      fbResults: null,\r\n      allMarkers: [],\r\n      clickedPlace: null,\r\n      infoWindow: null,\r\n      map: null,\r\n      menuOpen: false,\r\n      placesOnList: \"\",\r\n      query: \"\",\r\n      showingInfoWindow: false\r\n    }\r\n  }\r\n\r\n  updateQuery = (input) => {\r\n    if(this.state.infoWindow){\r\n      this.state.infoWindow.close();\r\n    }\r\n    this.setState({\r\n      query: input,\r\n      menuOpen: true\r\n    }, this.filterList);\r\n  }\r\n\r\n  //when a list item is clicked on, save the item name, show marker for item and hide other markers\r\n  onListClick = (venue) => {\r\n    venue = [venue];\r\n    this.setState({\r\n      clickedPlace: venue,\r\n      menuOpen: false\r\n    })\r\n    //When setMarkerVisibility runs as a callback in the this.setState function above,\r\n    //it is still looking at the old this.state.clickedPlace.\r\n    //Using setTimeout to ensure clickedPlace has been updated.\r\n    setTimeout(()=> {\r\n      this.setMarkerVisibility([venue[0]]);\r\n    }, 100)\r\n  }\r\n\r\n  filterList = ()=>{\r\n    const queryUpperCase = this.state.query.toUpperCase();\r\n    const items = document.querySelectorAll(\".item\");\r\n    let visiblePlaces = [];\r\n    items.forEach(item => {\r\n      //if text entered matches item from list, show item. If not, hide the item.\r\n      //Other possible code: items.filter(item=>{new RegExp(this.state.query,'i').exec(item.innerHTML)})\r\n      if (item.innerHTML.toUpperCase().indexOf(queryUpperCase) > -1) {\r\n        item.style.display = \"\";\r\n        const changeAmp = item.innerHTML.replace(/&amp;/, \"&\");\r\n        visiblePlaces.push(changeAmp.trim());\r\n      } else {\r\n        item.style.display = \"none\";\r\n      }\r\n    });\r\n    this.setState({\r\n      placesOnList: visiblePlaces\r\n    }, this.setMarkerVisibility(visiblePlaces))\r\n  }\r\n\r\n  setMarkerVisibility = (venue) => {\r\n    this.state.allMarkers.find(marker => {\r\n      //If list item hasn't been clicked, show markers currently visible on list\r\n      if (venue.includes(marker.title.trim())){\r\n        return marker.setVisible(true);\r\n      } else if (this.state.clickedPlace){\r\n        //If list item is clicked, show corresponding marker\r\n          if ([venue[0].name].includes(marker.title.trim())){\r\n            this.setState({\r\n              activeMarker: marker\r\n            })\r\n            return this.triggerMarkerClick();\r\n          } else {\r\n            return false\r\n          }\r\n      } else {\r\n        return marker.setVisible(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  triggerMarkerClick = ()=> {\r\n    this.state.google.maps.event.trigger(this.state.activeMarker, 'click');\r\n  }\r\n\r\n  onMarkerClick = (props, marker, infoWindow) => {\r\n    this.state.allMarkers.forEach((mkr)=>{\r\n      if(marker.title !== mkr.title){\r\n        mkr.setAnimation(null);\r\n      }\r\n    });\r\n    this.setState({\r\n      activeMarker: marker,\r\n      clickedPlace: props,\r\n      infoWindow: infoWindow,\r\n      menuOpen: false,\r\n      showingInfoWindow: true\r\n    });\r\n  }\r\n\r\n  onInfoWindowClose = () => {\r\n    this.setState({\r\n      activeMarker: {},\r\n      clickedPlace: null,\r\n      infoWindow: null,\r\n      menuOpen: false,\r\n      showingInfoWindow: false,\r\n    }, this.showAllMarkers)\r\n  }\r\n\r\n  showAllMarkers = ()=> {\r\n    this.state.allMarkers.forEach(marker => {\r\n      marker.setVisible(true);\r\n    });\r\n  }\r\n\r\n  getMap = (markers, infoWindow, map, google) => {\r\n    this.setState({\r\n      allMarkers: markers,\r\n      infoWindow: infoWindow,\r\n      map: map,\r\n      google: google\r\n    })\r\n  }\r\n\r\n  getFbResults = (searchResults) => {\r\n    this.setState({\r\n      fbResults: searchResults\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <nav className=\"App-header\" role=\"navigation\">\r\n          <h1>Neighborhood Map</h1>\r\n          <div tabIndex=\"0\">\r\n          <Menu noOverlay isOpen={this.state.menuOpen} tabIndex={0}\r\n            className=\"burger-menu\"\r\n            width={300} >\r\n            <VenueList\r\n              className=\"map-list\"\r\n              onListClick={this.onListClick}\r\n              venues={this.state.fbResults}\r\n              query={this.state.query}\r\n              updateQuery={this.updateQuery.bind(this)}\r\n            />\r\n          </Menu>\r\n          </div>\r\n        </nav>\r\n        <main>\r\n          <MapContainer\r\n            ref={\"map\"}\r\n            className=\"map-wrapper\"\r\n            fbResults={this.state.fbResults}\r\n            infoWindow={this.state.infoWindow}\r\n            allMarkers={this.state.allMarkers}\r\n            query={this.state.query}\r\n            getFbResults={this.getFbResults}\r\n            getMap={this.getMap}\r\n            onInfoWindowClose={this.onInfoWindowClose}\r\n            onMapClicked={this.onMapClicked}\r\n            onMarkerClick={this.onMarkerClick}\r\n            setMarkerVisibility={this.setMarkerVisibility}\r\n            triggerMarkerClick={this.triggerMarkerClick}\r\n            updateQuery={this.updateQuery}\r\n          />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}